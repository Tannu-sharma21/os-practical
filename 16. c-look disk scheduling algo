#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to implement C-LOOK disk scheduling algorithm
void cLook(vector<int>& requests, int head, int size, int direction) {
    // Sort the request array
    sort(requests.begin(), requests.end());
    
    // Find the position of the head in the sorted request array
    auto it = lower_bound(requests.begin(), requests.end(), head);
    
    // If the head is in the array, move the pointer to the next element
    if (it != requests.end() && *it != head) {
        it--;
    }
    
    // Moving towards right
    if (direction == 1) {
        // First, process requests greater than the current head
        for (auto i = it + 1; i != requests.end(); i++) {
            cout << "Move to " << *i << endl;
        }
        // Then, process requests smaller than the current head
        for (auto i = it; i >= requests.begin(); i--) {
            cout << "Move to " << *i << endl;
        }
    }
    // Moving towards left
    else {
        // First, process requests smaller than the current head
        for (auto i = it; i >= requests.begin(); i--) {
            cout << "Move to " << *i << endl;
        }
        // Then, process requests greater than the current head
        for (auto i = it + 1; i != requests.end(); i++) {
            cout << "Move to " << *i << endl;
        }
    }
}

int main() {
    vector<int> requests = {98, 183, 41, 122, 14, 124, 65, 67};
    int head = 50;  // Initial head position
    int direction = 1; // 1 for right, -1 for left
    int size = requests.size();

    cout << "C-LOOK Disk Scheduling Algorithm\n";
    cLook(requests, head, size, direction);
    
    return 0;
}
